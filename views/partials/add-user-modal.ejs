<div class="modal-wrapper" id="add-user-modal">
  <div class="modal">
    <a href="#" onclick="closeModal()" class="modal-close">+</a>
    <div class="modal-title">
      <h2>Create New User</h2>
    </div>
    <div class="modal-body">
      <form
        id="add-user-form"
        <!--
        method="post"
        enctype="multipart/form-data"
        action="/users"
        --
      >
        >
        <input type="text" placeholder="enter name" name="name" />
        <p class="error name-error"></p>
        <input type="text" placeholder="enter email" name="email" />
        <p class="error email-error"></p>
        <input type="text" placeholder="enter mobile" name="mobile" />
        <p class="error mobile-error"></p>
        <input type="password" placeholder="enter password" name="password" />
        <p class="error password-error"></p>
        <input type="file" name="avatar" />
        <p class="error avatar-error"></p>

        <p class="error common-error"></p>

        <input type="submit" value="Submit" />
      </form>
    </div>
  </div>
</div>
<script>
  const modal = document.querySelector('#add-user-modal');
  const form = document.querySelector('#add-user-form');
  function closeModal() {
    modal.style.display = 'none';
  }
  function openModal() {
    modal.style.display = 'block';
  }

  form.onsubmit = async function (event) {
    event.preventDefault();
    console.log('form = >', form);

    // clear previous errors
    const errorPlaceholders = document.querySelectorAll('p.error');
    for (let i = 0; i < errorPlaceholders.length; i++) {
      errorPlaceholders[i].style.display = 'none';
    }
    const inputErrors = document.querySelectorAll('input.error');
    for (let i = 0; i < inputErrors.length; i++) {
      inputErrors[i].classList.remove('error');
    }

    // prepare the form data
    const formData = new FormData(form);
    console.log('formData=>', formData);
    // send form data to server
    let response = await fetch('/users', {
      method: 'POST',
      body: formData,
    });
    // get response
    let result = await response.json();
    console.log('result=>', result);
    // handle error and response
    if (result.errors) {
      // errors
      Object.keys(result.errors).forEach((fieldName) => {
        console.log('fieldName=>', fieldName);
        form[fieldName].classList.add('error');

        // set all error placeholder (p tag) textContext
        const errorPlaceholder = document.querySelector(`.${fieldName}-error`);
        errorPlaceholder.textContent = result.errors[fieldName].msg;
        // make all place holder visible
        errorPlaceholder.style.display = 'block';
      });
    } else {
      // success
      alert('Success!');
      closeModal();
      document.querySelector('p.error').style.display = 'none';
      // reload page after 1/2 sec
      setTimeout(() => {
        location.reload();
      }, 500);
    }
  };
</script>
